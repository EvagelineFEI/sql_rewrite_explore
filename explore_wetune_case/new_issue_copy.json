[
    {
        "case source": "discourse",
        "rewrite rule": "Predicate Elimination",
        "link": "https://github.com/discourse/discourse/commit/f364317625ee273d1e8983faa271831db912953b",
        "original-sql": "SELECT * FROM posts LEFT JOIN topic_allowed_groups AS tg ON posts.topic_id = tg.topic_id WHERE tg.id IS NULL AND posts.topic_id IN (SELECT tau.topic_id FROM topic_allowed_users AS tau INNER JOIN topic_allowed_users AS tau2 ON tau2.topic_id = tau.topic_id AND tau2.id <> tau.id WHERE tau.user_id = 1086 AND tau.topic_id = posts.topic_id GROUP BY tau.topic_id HAVING COUNT(*) = 1)",
        "rewritten-sql": "SELECT * FROM posts LEFT JOIN topic_allowed_groups tg ON posts.topic_id = tg.topic_id WHERE tg.id IS NULL AND posts.topic_id IN (SELECT tau.topic_id FROM topic_allowed_users tau JOIN topic_allowed_users tau2 ON tau2.topic_id = tau.topic_id AND tau2.id != tau.id WHERE tau.user_id = 1086 GROUP BY tau.topic_id HAVING COUNT(*) = 1)",
        "schema": "CREATE TABLE `posts`(     `id` int(11) NOT NULL AUTO_INCREMENT,     `topic_id` int(11) NOT NULL,     PRIMARY KEY (`id`) );  CREATE TABLE `topic_allowed_groups`(     `id` int(11) NOT NULL AUTO_INCREMENT,     `topic_id` int(11) NOT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`topic_id`) REFERENCES posts(`topic_id`) );  CREATE TABLE `topic_allowed_users`(     `id` int(11) NOT NULL AUTO_INCREMENT,     `topic_id` int(11) NOT NULL,     `user_id` int(11) NOT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`topic_id`) REFERENCES posts(`topic_id`) ); ",
        "wetune_result": "None"
    },
    {
        "case source": "discourse",
        "rewrite rule": "DISTINCT elimination",
        "link": "https://github.com/discourse/discourse/commit/5cef71e885004d32c5ee19382389773ecc80e6c8",
        "original-sql": "SELECT DISTINCT * FROM child_themes WHERE parent_theme_id = 4076",
        "rewritten-sql": "SELECT * FROM child_themes WHERE parent_theme_id = 4076",
        "schema": "CREATE TABLE `child_themes`(     `id` int(11) NOT NULL AUTO_INCREMENT,     `parent_theme_id` int(11) NOT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`parent_theme_id`) REFERENCES parent_themes(id) ); ",
        "wetune_result": "SELECT `child_themes`.`id` AS `id`, `child_themes`.`parent_theme_id` AS `parent_theme_id` FROM `child_themes` AS `child_themes` WHERE `child_themes`.`parent_theme_id` = 4076;"
    },
    {
        "case source": "discourse",
        "rewrite rule": "Subquery to join",
        "link": "https://github.com/discourse/discourse/commit/6525613b89219036ebc461c48658b67e9ae7abbd",
        "original-sql": "SELECT posts.* FROM posts INNER JOIN topics ON posts.topic_id = topics.id WHERE posts.created_at > '2004-01-25T04:25:35' AND topics.id IN (SELECT topics.id FROM topics LEFT JOIN topic_users ON topic_users.topic_id = topics.id AND topic_users.user_id = 3287 LEFT JOIN category_users ON category_users.category_id = topics.category_id AND category_users.user_id = 5904 LEFT JOIN users ON users.id = topics.user_id WHERE topics.visible IS TRUE AND (topics.category_id IS NULL OR topics.category_id IN (SELECT id FROM categories WHERE NOT read_restricted IS TRUE)) AND topics.closed IS FALSE AND topics.archived IS FALSE AND COALESCE(topic_users.notification_level, 1) <> 3 AND topics.created_at > '2004-01-10T05:23:45' AND topics.created_at < '2004-01-24T07:45:25' AND topics.archetype <> 'regular') ORDER BY posts.created_at ASC",
        "rewritten-sql": "SELECT posts.* FROM posts INNER JOIN (SELECT topics.id FROM topics LEFT OUTER JOIN topic_users ON topic_users.topic_id = topics.id AND topic_users.user_id = 3287 LEFT OUTER JOIN category_users ON category_users.category_id = topics.category_id AND category_users.user_id = 5904 LEFT OUTER JOIN users ON users.id = topics.user_id WHERE topics.visible IS TRUE AND (topics.category_id IS NULL OR topics.category_id IN (SELECT id FROM categories WHERE NOT read_restricted IS TRUE)) AND topics.closed IS FALSE AND topics.archived IS FALSE AND COALESCE(topic_users.notification_level, 1) <> 3 AND topics.created_at > '2004-01-10T05:23:45' AND topics.created_at < '2004-01-24T07:45:25' AND topics.archetype <> 'regular') x ON x.id = posts.topic_id WHERE posts.created_at > '2004-01-25T04:25:35' ORDER BY posts.created_at ASC",
        "schema": "CREATE TABLE `posts` (     `id` int(11) NOT NULL AUTO_INCREMENT,     `topic_id` int(11) NOT NULL,     `created_at` datetime NOT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`topic_id`) REFERENCES `topics`(`id`) );  CREATE TABLE `topics` (     `id` int(11) NOT NULL AUTO_INCREMENT,     `category_id` int(11) DEFAULT NULL,     `user_id` int(11) NOT NULL,     `visible` boolean NOT NULL,     `closed` boolean NOT NULL,     `archived` boolean NOT NULL,     `created_at` datetime NOT NULL,     `archetype` varchar(255) NOT NULL,     PRIMARY KEY (`id`) );  CREATE TABLE `topic_users` (     `id` int(11) NOT NULL AUTO_INCREMENT,     `topic_id` int(11) NOT NULL,     `user_id` int(11) NOT NULL,     `notification_level` int(11) DEFAULT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`topic_id`) REFERENCES `topics`(`id`) );  CREATE TABLE `category_users` (     `id` int(11) NOT NULL AUTO_INCREMENT,     `category_id` int(11) NOT NULL,     `user_id` int(11) NOT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`category_id`) REFERENCES `categories`(`id`) );  CREATE TABLE `users` (     `id` int(11) NOT NULL AUTO_INCREMENT,     PRIMARY KEY (`id`) );  CREATE TABLE `categories` (     `id` int(11) NOT NULL AUTO_INCREMENT,     `read_restricted` boolean NOT NULL,     PRIMARY KEY (`id`) ); ",
        "wetune_result": "SELECT DISTINCT `posts`.`id` AS `id`, `posts`.`topic_id` AS `topic_id`, `posts`.`created_at` AS `created_at` FROM `posts` AS `posts` INNER JOIN `topics` AS `topics0` ON `posts`.`topic_id` = `topics0`.`id` LEFT JOIN `topic_users` AS `topic_users` ON `topic_users`.`topic_id` = `topics0`.`id` AND `topic_users`.`user_id` = 3287 LEFT JOIN `category_users` AS `category_users` ON `category_users`.`category_id` = `topics0`.`category_id` AND `category_users`.`user_id` = 5904 WHERE `topics0`.`visible` = TRUE AND ( `topics0`.`category_id` IS NULL OR `topics0`.`category_id` IN ( SELECT `id` FROM `categories` WHERE NOT `read_restricted` = TRUE ) ) AND NOT `topics0`.`closed` = TRUE AND NOT `topics0`.`archived` = TRUE AND COALESCE(`topic_users`.`notification_level`, 1) <> 3 AND `topics0`.`created_at` > '2004-01-10T05:23:45' AND `topics0`.`created_at` < '2004-01-24T07:45:25' AND `topics0`.`archetype` <> 'regular' AND `posts`.`created_at` > '2004-01-25T04:25:35' ORDER BY `posts`.`created_at` ASC;"
    },
    {
        "case source": "discourse",
        "rewrite rule": "OR to union",
        "link": "https://github.com/discourse/discourse/commit/ac80360bea2ce4c9e93a38395d16e2ecc2cee2ed",
        "original-sql": "SELECT * FROM posts WHERE topic_id = 6020 AND post_number = 1 OR id IN (SELECT p1.id FROM posts AS p1 WHERE p1.\"percent_rank\" <= 88.0 AND p1.topic_id = 7290)",
        "rewritten-sql": "SELECT * FROM posts WHERE id IN ((SELECT posts.id FROM posts WHERE posts.topic_id = 6020 AND post_number = 1) UNION (SELECT p1.id FROM posts p1 WHERE p1.\"percent_rank\" <= 88.0 AND p1.topic_id = 7290))",
        "schema": "CREATE TABLE posts (     id int NOT NULL,     topic_id int NOT NULL,     post_number int NOT NULL,     \"percent_rank\" float DEFAULT NULL,     PRIMARY KEY (id) ); ",
        "wetune_result": "None"
    },
    {
        "case source": "discourse",
        "rewrite rule": "Subquery to predicate",
        "link": "https://github.com/discourse/discourse/commit/248bebb8cdb7f8f2cb104d91a08e529b36224f6d",
        "original-sql": "SELECT * FROM posts INNER JOIN topics ON topics.id = posts.topic_id INNER JOIN categories ON categories.id = topics.category_id WHERE NOT categories.id IN (SELECT categories.id FROM categories WHERE categories.search_priority = 5)",
        "rewritten-sql": "SELECT * FROM posts INNER JOIN topics ON topics.id = posts.topic_id INNER JOIN categories ON categories.id = topics.category_id WHERE categories.search_priority <> 5",
        "schema": "CREATE TABLE `categories`(     `id` int(11) NOT NULL,     `search_priority` int(11) DEFAULT NULL,     PRIMARY KEY (`id`) );  CREATE TABLE `topics`(     `id` int(11) NOT NULL,     `category_id` int(11) NOT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`category_id`) REFERENCES categories(`id`) );  CREATE TABLE `posts`(     `id` int(11) NOT NULL AUTO_INCREMENT,     `topic_id` int(11) NOT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`topic_id`) REFERENCES topics(`id`) ); ",
        "wetune_result": "error"
    },
    {
        "case source": "discourse",
        "rewrite rule": "Predicate pushdown",
        "link": "https://github.com/discourse/discourse/commit/1fdeec564ba903571763b8372b97636e76c6bfb1",
        "original-sql": "SELECT * FROM posts CROSS JOIN (SELECT post_timings.topic_id, post_timings.post_number, EXP(AVG(msecs)) AS gmean FROM post_timings INNER JOIN posts AS p2 ON p2.post_number = post_timings.post_number AND p2.topic_id = post_timings.topic_id AND p2.user_id <> post_timings.user_id GROUP BY post_timings.topic_id, post_timings.post_number) AS x WHERE x.topic_id = posts.topic_id AND x.post_number = posts.post_number AND (posts.avg_time <> x.gmean / 1000 OR posts.avg_time IS NULL) AND posts.topic_id IN (SELECT id FROM topics WHERE bumped_at > '2004-01-01T00:00:00')",
        "rewritten-sql": "SELECT * FROM posts,(SELECT post_timings.topic_id, post_timings.post_number, exp(avg(msecs)) AS gmean FROM post_timings INNER JOIN posts AS p2 ON p2.post_number = post_timings.post_number AND p2.topic_id = post_timings.topic_id AND p2.user_id <> post_timings.user_id WHERE p2.topic_id IN (SELECT id FROM topics WHERE bumped_at > '2004-01-01T00:00:00') GROUP BY post_timings.topic_id, post_timings.post_number) AS x WHERE x.topic_id = posts.topic_id AND x.post_number = posts.post_number AND (posts.avg_time <> (x.gmean / 1000) OR posts.avg_time IS NULL)",
        "schema": "CREATE TABLE `posts` (     `id` int(11) NOT NULL AUTO_INCREMENT,     `topic_id` int(11) NOT NULL,     `post_number` int(11) NOT NULL,     `user_id` int(11) NOT NULL,     `avg_time` float DEFAULT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`topic_id`) REFERENCES topics(`id`) );  CREATE TABLE `post_timings` (     `id` int(11) NOT NULL AUTO_INCREMENT,     `topic_id` int(11) NOT NULL,     `post_number` int(11) NOT NULL,     `user_id` int(11) NOT NULL,     `msecs` float NOT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`topic_id`) REFERENCES topics(`id`) );  CREATE TABLE `topics` (     `id` int(11) NOT NULL AUTO_INCREMENT,     `bumped_at` datetime NOT NULL,     PRIMARY KEY (`id`) ); ",
        "wetune_result": "SELECT `posts`.`id` AS `id`, `posts`.`topic_id` AS `topic_id`, `posts`.`post_number` AS `post_number`, `posts`.`user_id` AS `user_id`, `posts`.`avg_time` AS `avg_time`, `x`.`topic_id` AS `topic_id`, `x`.`post_number` AS `post_number`, `x`.`gmean` AS `gmean` FROM `topics` AS `topics` INNER JOIN `posts` AS `posts` ON `topics`.`id` = `posts`.`topic_id` INNER JOIN ( SELECT `post_timings`.`topic_id` AS `topic_id`, `post_timings`.`post_number` AS `post_number`, EXP(AVG(`post_timings`.`msecs`)) AS `gmean` FROM `post_timings` AS `post_timings` INNER JOIN `posts` AS `p2` ON `p2`.`post_number` = `post_timings`.`post_number` AND `p2`.`topic_id` = `post_timings`.`topic_id` AND `p2`.`user_id` <> `post_timings`.`user_id` GROUP BY `post_timings`.`post_number`, `post_timings`.`topic_id` ) AS `x` ON `x`.`topic_id` = `posts`.`topic_id` AND `x`.`post_number` = `posts`.`post_number` WHERE (`posts`.`avg_time` <> `x`.`gmean` / 1000 OR `posts`.`avg_time` IS NULL) AND `topics`.`bumped_at` > '2004-01-01T00:00:00';",
        "wetune_result2":"SELECT `posts`.`id` AS `id`, `posts`.`topic_id` AS `topic_id`, `posts`.`post_number` AS `post_number`, `posts`.`user_id` AS `user_id`, `posts`.`avg_time` AS `avg_time`, `x`.`topic_id` AS `topic_id`, `x`.`post_number` AS `post_number`, `x`.`gmean` AS `gmean` FROM `posts` AS `posts` INNER JOIN ( SELECT `post_timings`.`topic_id` AS `topic_id`, `post_timings`.`post_number` AS `post_number`, EXP(AVG(`post_timings`.`msecs`)) AS `gmean` FROM `post_timings` AS `post_timings` INNER JOIN `posts` AS `p2` ON `p2`.`post_number` = `post_timings`.`post_number` AND `p2`.`topic_id` = `post_timings`.`topic_id` AND `p2`.`user_id` <> `post_timings`.`user_id` GROUP BY `post_timings`.`post_number`, `post_timings`.`topic_id` ) AS `x` ON `x`.`topic_id` = `posts`.`topic_id` AND `x`.`post_number` = `posts`.`post_number` INNER JOIN `topics` AS `topics` ON `posts`.`topic_id` = `topics`.`id` WHERE `topics`.`bumped_at` > '2004-01-01T00:00:00' AND ( `posts`.`avg_time` <> `x`.`gmean` / 1000 OR `posts`.`avg_time` IS NULL );"
    },
    {
        "case source": "discourse",
        "rewrite rule": "Subquery elimination",
        "link": "https://github.com/discourse/discourse/commit/e6f73a1c802442715bc41cf8ce93d0ae44a06547",
        "original-sql": "SELECT * FROM categories WHERE categories.id IN (SELECT c.id FROM categories AS c WHERE NOT c.read_restricted IS TRUE AND NOT EXISTS (SELECT 1 FROM category_groups AS cg WHERE cg.category_id = categories.id) OR EXISTS (SELECT 1 FROM category_groups AS cg WHERE permission_type IN (2081219153) AND cg.category_id = categories.id AND group_id IN (SELECT g.group_id FROM group_users g where g.user_id = 1420)))",
        "rewritten-sql": "SELECT * FROM categories c WHERE NOT c.read_restricted IS TRUE AND NOT EXISTS (SELECT 1 FROM category_groups cg WHERE cg.category_id = c.id) OR EXISTS (SELECT 1 FROM category_groups cg WHERE permission_type IN (2081219153) AND cg.category_id = c.id AND group_id IN (SELECT g.group_id FROM group_users g where g.user_id = 1420))",
        "schema": "CREATE TABLE `categories`(     `id` int(11) NOT NULL,     `read_restricted` boolean DEFAULT NULL,     PRIMARY KEY (`id`) );  CREATE TABLE `category_groups`(     `id` int(11) NOT NULL AUTO_INCREMENT,     `category_id` int(11) NOT NULL,     `permission_type` int(11) DEFAULT NULL,     `group_id` int(11) DEFAULT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`category_id`) REFERENCES categories(`id`) );  CREATE TABLE `group_users`(     `id` int(11) NOT NULL AUTO_INCREMENT,     `group_id` int(11) NOT NULL,     `user_id` int(11) NOT NULL,     PRIMARY KEY (`id`) ); ",
        "wetune_result": "SELECT `categories`.`id` AS `id`, `categories`.`read_restricted` AS `read_restricted` FROM `categories` AS `categories` WHERE NOT `categories`.`read_restricted` = TRUE AND NOT EXISTS ( SELECT 1 FROM `category_groups` AS `cg` WHERE `cg`.`category_id` = `categories`.`id` ) OR EXISTS ( SELECT 1 FROM `category_groups` AS `cg` WHERE `permission_type` IN (2081219153) AND `cg`.`category_id` = `categories`.`id` AND `group_id` IN ( SELECT `g`.`group_id` FROM `group_users` AS `g` WHERE `g`.`user_id` = 1420 ) );"
    },
    {
        "case source": "discourse",
        "rewrite rule": "Subquery to join",
        "link": "https://github.com/discourse/discourse/commit/f0f3deb32b84c87390aa9323597c13818bd6084a",
        "original-sql": "SELECT COUNT(topics.id) FROM topics WHERE id IN (SELECT topic_id FROM posts AS p INNER JOIN topics AS t2 ON t2.id = p.topic_id WHERE p.deleted_at IS NULL AND t2.user_id <> p.user_id AND p.user_id = 9627)",
        "rewritten-sql": "SELECT COUNT(DISTINCT topics.id) FROM topics INNER JOIN posts ON topics.id = posts.topic_id AND topics.user_id <> posts.user_id WHERE posts.deleted_at IS NULL AND posts.user_id = 9627",
        "schema": "CREATE TABLE `topics`(     `id` int(11) NOT NULL,     `user_id` int(11) NOT NULL,     PRIMARY KEY (`id`) );  CREATE TABLE `posts`(     `id` int(11) NOT NULL AUTO_INCREMENT,     `topic_id` int(11) NOT NULL,     `user_id` int(11) NOT NULL,     `deleted_at` datetime DEFAULT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`topic_id`) REFERENCES topics(`id`) ); ",
        "wetune_result": "SELECT COUNT(DISTINCT `p`.`topic_id`) FROM `posts` AS `p` INNER JOIN `topics` AS `t2` ON `t2`.`id` = `p`.`topic_id` WHERE `p`.`deleted_at` IS NULL AND `t2`.`user_id` <> `p`.`user_id` AND `p`.`user_id` = 9627"
    },
    {
        "case source": "discourse",
        "rewrite rule": "Subquery to join",
        "link": "https://github.com/discourse/discourse/commit/03f63d970bb683e0e33097d39d8ae78d786b0309",
        "original-sql": "SELECT * FROM posts INNER JOIN topics ON topics.id = posts.topic_id WHERE NOT posts.id IN (SELECT post_id FROM post_search_data WHERE locale = '0')",
        "rewritten-sql": "SELECT * FROM posts INNER JOIN topics ON topics.id = posts.topic_id WHERE posts.id IN (SELECT p2.id FROM posts p2 LEFT JOIN post_search_data pd ON locale = '0' AND p2.id = pd.post_id WHERE pd.post_id IS NULL)",
        "schema": "CREATE TABLE `topics`(     `id` int(11) NOT NULL,     PRIMARY KEY (`id`) );  CREATE TABLE `posts`(     `id` int(11) NOT NULL AUTO_INCREMENT,     `topic_id` int(11) NOT NULL,     FOREIGN KEY (`topic_id`) REFERENCES topics(`id`) );  CREATE TABLE `post_search_data`(     `post_id` int(11) NOT NULL,     `locale` varchar(255) NOT NULL,     FOREIGN KEY (`post_id`) REFERENCES posts(`id`) ); ",
        "wetune_result": "None"
    },
    {
        "case source": "discourse",
        "rewrite rule": "Subquery to join",
        "link": "https://github.com/discourse/discourse/commit/1f062ae2fde43a44f407f4af91a190c8c02fb1e0",
        "original-sql": "SELECT * FROM category_users WHERE NOT user_id IN (SELECT id FROM users)",
        "rewritten-sql": "SELECT * FROM category_users WHERE user_id IN (SELECT cu.user_id FROM category_users cu LEFT JOIN users u ON u.id = cu.user_id WHERE u.id IS NULL)",
        "schema": "CREATE TABLE `users`(     `id` int(11) NOT NULL,     PRIMARY KEY (`id`) );  CREATE TABLE `category_users`(     `id` int(11) NOT NULL AUTO_INCREMENT,     `user_id` int(11) NOT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`user_id`) REFERENCES `users`(`id`) ); ",
        "wetune_result": "None"
    },
    {
        "case source": "discourse",
        "rewrite rule": "Subquery elimination",
        "link": "https://github.com/discourse/discourse/commit/e564614b7030d79910c481d3d8cbe933201d2f56",
        "original-sql": "SELECT group_users.* FROM group_users WHERE user_id IN (SELECT users.id FROM \"groups\" INNER JOIN group_users ON group_users.group_id = \"groups\".id INNER JOIN users ON users.id = group_users.user_id WHERE NOT user_id IN (SELECT u.id FROM users AS u WHERE u.admin IS TRUE))",
        "rewritten-sql": "SELECT group_users.* FROM group_users JOIN (SELECT users.id FROM users WHERE NOT users.admin IS TRUE) u ON group_users.user_id = u.id",
        "schema": "CREATE TABLE \"groups\"(     \"id\" int NOT NULL,     PRIMARY KEY (\"id\") );  CREATE TABLE users(     \"id\" int NOT NULL,     \"admin\" BOOLEAN DEFAULT FALSE,     PRIMARY KEY (\"id\") );  CREATE TABLE group_users(     \"id\" int NOT NULL AUTO_INCREMENT,     \"group_id\" int NOT NULL,     \"user_id\" int NOT NULL,     PRIMARY KEY (\"id\"),     FOREIGN KEY (\"group_id\") REFERENCES \"groups\"(\"id\"),     FOREIGN KEY (\"user_id\") REFERENCES users(\"id\") ); ",
        "wetune_result": "error"
    },
    {
        "case source": "discourse",
        "rewrite rule": "Subquery to join",
        "link": "https://github.com/discourse/discourse/commit/63292cecd9e52751b1ce173799951b88886e60d7",
        "original-sql": "SELECT * FROM users WHERE active IS TRUE AND users.id IN (SELECT user_id FROM group_users WHERE group_id = 8861) LIMIT 20",
        "rewritten-sql": "SELECT users.* FROM users INNER JOIN group_users ON group_users.user_id = users.id WHERE active IS TRUE AND group_users.group_id = 8861 LIMIT 20",
        "schema": "CREATE TABLE `users` (     `id` int(11) NOT NULL,     `active` boolean NOT NULL,     PRIMARY KEY (`id`) );  CREATE TABLE `group_users` (     `id` int(11) NOT NULL AUTO_INCREMENT,     `user_id` int(11) NOT NULL,     `group_id` int(11) NOT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`user_id`) REFERENCES users(`id`) ); ",
        "wetune_result": "SELECT DISTINCT `users`.`id` AS `id`, `users`.`active` AS `active` FROM `group_users` AS `group_users` INNER JOIN `users` AS `users` ON `group_users`.`user_id` = `users`.`id` WHERE `users`.`active` = TRUE AND `group_users`.`group_id` = 8861 LIMIT 20"
    },
    {
        "case source": "discourse",
        "rewrite rule": "Subquery to join",
        "link": "https://github.com/discourse/discourse/commit/5a77f6218101b85b360d2ec564928d863bc91964",
        "original-sql": "SELECT * FROM notifications WHERE notifications.topic_id IS NULL OR notifications.topic_id IN (SELECT id FROM topics WHERE deleted_at IS NULL)",
        "rewritten-sql": "SELECT notifications.* FROM notifications LEFT JOIN topics ON notifications.topic_id = topics.id AND topics.deleted_at IS NULL",
        "schema": "CREATE TABLE `topics`(     `id` int(11) NOT NULL,     `deleted_at` datetime DEFAULT NULL,     PRIMARY KEY (`id`) );  CREATE TABLE `notifications`(     `id` int(11) NOT NULL AUTO_INCREMENT,     `topic_id` int(11) DEFAULT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`topic_id`) REFERENCES topics(`id`) ); ",
        "wetune_result": "None"
    },
    {
        "case source": "discourse",
        "rewrite rule": "Subquery to join",
        "link": "https://github.com/discourse/discourse/commit/28148197d6467cdc7469409f961c00d4e32f4c41",
        "original-sql": "SELECT topics.* FROM topics LEFT JOIN topic_users AS tu ON topics.id = tu.topic_id AND tu.user_id = 13455 WHERE topics.deleted_at IS NULL AND topics.archetype = 'private_message' AND topics.id IN (SELECT topic_id FROM topic_allowed_users WHERE user_id = 13455) AND (topics.id IN (SELECT ta.topic_id FROM topic_allowed_users AS ta WHERE ta.user_id IN (2, 1995, 8307, 17621, 22980, -10)) OR topics.id IN (SELECT tg.topic_id FROM topic_allowed_groups AS tg WHERE tg.group_id IN (-10))) AND NOT topics.id IN (68559, 60069, 42145) AND topics.visible = 't' ORDER BY topics.bumped_at DESC",
        "rewritten-sql": "SELECT topics.* FROM topics LEFT JOIN topic_users tu ON topics.id = tu.topic_id AND tu.user_id = 13455 INNER JOIN topic_allowed_users ta ON topics.id = ta.topic_id LEFT JOIN topic_allowed_users ta2 ON topics.id = ta2.topic_id AND ta2.user_id IN (2, 1995, 8307, 17621, 22980,-10) LEFT JOIN topic_allowed_groups tg ON topics.id = tg.topic_id AND tg.group_id IN (-10) WHERE topics.deleted_at IS NULL AND topics.archetype = 'private_message' AND ta.user_id = 13455 AND (ta2.topic_id IS NOT NULL OR tg.topic_id IS NOT NULL) AND topics.id NOT IN (68559, 60069, 42145) AND topics.visible = 't' ORDER BY topics.bumped_at DESC",
        "schema": "CREATE TABLE `topics` (     `id` int(11) NOT NULL,     `deleted_at` datetime DEFAULT NULL,     `archetype` varchar(255) DEFAULT NULL,     `visible` boolean DEFAULT 't',     `bumped_at` datetime DEFAULT NULL,     PRIMARY KEY (`id`) );  CREATE TABLE `topic_users` (     `id` int(11) NOT NULL AUTO_INCREMENT,     `topic_id` int(11) NOT NULL,     `user_id` int(11) NOT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`topic_id`) REFERENCES topics(`id`) );  CREATE TABLE `topic_allowed_users` (     `id` int(11) NOT NULL AUTO_INCREMENT,     `topic_id` int(11) NOT NULL,     `user_id` int(11) NOT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`topic_id`) REFERENCES topics(`id`) );  CREATE TABLE `topic_allowed_groups` (     `id` int(11) NOT NULL AUTO_INCREMENT,     `topic_id` int(11) NOT NULL,     `group_id` int(11) NOT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`topic_id`) REFERENCES topics(`id`) ); ",
        "wetune_result": "SELECT `topics`.`id` AS `id`, `topics`.`deleted_at` AS `deleted_at`, `topics`.`archetype` AS `archetype`, `topics`.`visible` AS `visible`, `topics`.`bumped_at` AS `bumped_at` FROM `topics` AS `topics` LEFT JOIN `topic_users` AS `tu` ON `topics`.`id` = `tu`.`topic_id` AND `tu`.`user_id` = 13455 WHERE `topics`.`deleted_at` IS NULL AND `topics`.`archetype` = 'private_message' AND ( `topics`.`id` IN ( SELECT `ta`.`topic_id` FROM `topic_allowed_users` AS `ta` WHERE `ta`.`user_id` IN (2, 1995, 8307, 17621, 22980, -10) ) OR `topics`.`id` IN ( SELECT `tg`.`topic_id` FROM `topic_allowed_groups` AS `tg` WHERE `tg`.`group_id` IN (-10) ) ) AND `topics`.`visible` = 't' AND `topics`.`id` IN ( SELECT `topic_allowed_users`.`topic_id` AS `topic_id` FROM `topic_allowed_users` AS `topic_allowed_users` WHERE `topic_allowed_users`.`user_id` = 13455 AND NOT `topic_allowed_users`.`topic_id` IN (68559, 60069, 42145) ) ORDER BY `topics`.`bumped_at` DESC;"
    },
    {
        "case source": "discourse",
        "rewrite rule": "OR to union",
        "link": "https://github.com/discourse/discourse/commit/fcfce3e426a64ffa567c572eeeaeb2ef700b15dc",
        "original-sql": "SELECT * FROM categories AS categories INNER JOIN topics ON categories.topic_id = topics.id WHERE categories.id = 1 OR (categories.parent_category_id = 1 AND categories.topic_id <> topics.id)",
        "rewritten-sql": "SELECT * FROM categories INNER JOIN topics ON categories.topic_id = topics.id WHERE categories.id IN (SELECT c2.id FROM categories c2 WHERE c2.parent_category_id = 1 UNION ALL SELECT 1) AND topics.id NOT IN (SELECT c3.topic_id FROM categories c3 WHERE c3.parent_category_id = 1)",
        "schema": "CREATE TABLE `topics`(     `id` int(11) NOT NULL,     PRIMARY KEY (`id`) );  CREATE TABLE `categories`(     `id` int(11) NOT NULL AUTO_INCREMENT,     `topic_id` int(11) NOT NULL,     `parent_category_id` int(11) DEFAULT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`topic_id`) REFERENCES `topics`(`id`) ); ",
        "wetune_result": "None"
    },
    {
        "case source": "gitlab",
        "rewrite rule": "OrderBy Elimination",
        "link": "https://gitlab.com/gitlab-org/gitlab-foss/-/commit/aada01030cd23719a54a4e499b72c12f95ce0d24",
        "original-sql": "SELECT issues.* FROM issues WHERE issues.project_id = 13083 AND issues.iid = 1 ORDER BY issues.id DESC LIMIT 1",
        "rewritten-sql": "SELECT issues.* FROM issues WHERE issues.project_id = 13083 AND issues.iid = 1 LIMIT 1",
        "schema": "CREATE TABLE `issues`(     `id` int(11) NOT NULL AUTO_INCREMENT,     `project_id` int(11) NOT NULL,     `iid` int(11) NOT NULL,     PRIMARY KEY (`id`) ); ",
        "wetune_result": "None"
    },
    {
        "case source": "gitlab",
        "rewrite rule": "Predicate pushup",
        "link": "https://gitlab.com/gitlab-org/gitlab/-/commit/3205efc1a4652fdf06132fefc0e59999dedac5b4",
        "original-sql": "SELECT ci_pipelines.* FROM ci_pipelines WHERE ci_pipelines.id IN (SELECT MAX(id) FROM ci_pipelines WHERE ci_pipelines.project_id = 14074169 AND ci_pipelines.\"ref\" IN ('actually', 'existing', 'refs', 'here') GROUP BY ci_pipelines.\"ref\") ORDER BY ci_pipelines.id DESC LIMIT 20 OFFSET 0",
        "rewritten-sql": "SELECT ci_pipelines.* FROM ci_pipelines WHERE project_id = 14074169 AND ci_pipelines.id IN (SELECT max(id) FROM ci_pipelines WHERE ci_pipelines.project_id = 14074169 AND ci_pipelines.\"ref\" IN ('actually', 'existing', 'refs', 'here') GROUP BY ci_pipelines.\"ref\") ORDER BY ci_pipelines.id DESC LIMIT 20 OFFSET 0",
        "schema": "CREATE TABLE ci_pipelines (     id int NOT NULL,     project_id int NOT NULL,     \"ref\" varchar(255) NOT NULL,     PRIMARY KEY (id) ); ",
        "wetune_result": "None"
    },
    {
        "case source": "gitlab",
        "rewrite rule": "Join Elimination",
        "link": "https://gitlab.com/gitlab-org/gitlab/-/commit/f40d8c1ce0e1f19b12aa85f40a9c3e2f8f1e853a",
        "original-sql": "SELECT issues.* FROM issues LEFT JOIN milestones ON issues.milestone_id = milestones.id INNER JOIN milestone_releases ON milestones.id = milestone_releases.milestone_id INNER JOIN releases ON milestone_releases.release_id = releases.id WHERE NOT milestone_releases.release_id IS NULL",
        "rewritten-sql": "SELECT issues.* FROM issues INNER JOIN milestone_releases ON issues.milestone_id = milestone_releases.milestone_id INNER JOIN releases ON milestone_releases.release_id = releases.id",
        "schema": "CREATE TABLE `issues`(     `id` int(11) NOT NULL AUTO_INCREMENT,     `milestone_id` int(11) DEFAULT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`milestone_id`) REFERENCES milestones(`id`) );  CREATE TABLE `milestones`(     `id` int(11) NOT NULL AUTO_INCREMENT,     PRIMARY KEY (`id`) );  CREATE TABLE `milestone_releases`(     `id` int(11) NOT NULL AUTO_INCREMENT,     `milestone_id` int(11) NOT NULL,     `release_id` int(11) NOT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`milestone_id`) REFERENCES milestones(`id`),     FOREIGN KEY (`release_id`) REFERENCES releases(`id`) );  CREATE TABLE `releases`(     `id` int(11) NOT NULL AUTO_INCREMENT,     PRIMARY KEY (`id`) ); ",
        "wetune_result": "SELECT `issues`.`id` AS `id`, `issues`.`milestone_id` AS `milestone_id` FROM `milestone_releases` AS `milestone_releases` INNER JOIN `issues` AS `issues` ON `milestone_releases`.`milestone_id` = `issues`.`milestone_id` WHERE NOT `milestone_releases`.`release_id` IS NULL;"
    },
    {
        "case source": "gitlab",
        "rewrite rule": "Join Elimination",
        "link": "https://gitlab.com/gitlab-org/gitlab/-/commit/a6cf8fa55266a6ed95619972a7993cf1e8603977",
        "original-sql": "SELECT COUNT(*) FROM projects INNER JOIN project_repository_states ON project_repository_states.project_id = projects.id WHERE NOT project_repository_states.wiki_verification_checksum IS NULL AND project_repository_states.last_wiki_verification_failure IS NULL",
        "rewritten-sql": "SELECT COUNT(*) FROM project_repository_states WHERE project_repository_states.wiki_verification_checksum IS NOT NULL AND project_repository_states.last_wiki_verification_failure IS NULL",
        "schema": "CREATE TABLE `projects`(     `id` int(11) NOT NULL,     PRIMARY KEY (`id`) );  CREATE TABLE `project_repository_states`(     `id` int(11) NOT NULL AUTO_INCREMENT,     `project_id` int(11) NOT NULL,     `wiki_verification_checksum` varchar(255) DEFAULT NULL,     `last_wiki_verification_failure` datetime DEFAULT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`project_id`) REFERENCES `projects`(`id`) ); ",
        "wetune_result": "SELECT COUNT(*) FROM `project_repository_states` AS `project_repository_states` WHERE NOT `project_repository_states`.`wiki_verification_checksum` IS NULL AND `project_repository_states`.`last_wiki_verification_failure` IS NULL;"
    },
    {
        "case source": "gitlab",
        "rewrite rule": "Join Elimination",
        "link": "https://gitlab.com/gitlab-org/gitlab/-/commit/fbc3f8bb6ed93196f28f835e6045d7339c2ae592",
        "original-sql": "SELECT COUNT(*) FROM projects INNER JOIN project_repository_states ON project_repository_states.project_id = projects.id WHERE NOT project_repository_states.repository_verification_checksum IS NULL AND project_repository_states.last_repository_verification_failure IS NULL",
        "rewritten-sql": "SELECT COUNT(*) FROM project_repository_states WHERE project_repository_states.repository_verification_checksum IS NOT NULL AND project_repository_states.last_repository_verification_failure IS NULL",
        "schema": "CREATE TABLE `projects`(     `id` int(11) NOT NULL,     PRIMARY KEY (`id`) );  CREATE TABLE `project_repository_states`(     `id` int(11) NOT NULL AUTO_INCREMENT,     `project_id` int(11) NOT NULL,     `repository_verification_checksum` varchar(255) DEFAULT NULL,     `last_repository_verification_failure` varchar(255) DEFAULT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`project_id`) REFERENCES projects(`id`) ); ",
        "wetune_result": "SELECT COUNT(*) FROM `project_repository_states` AS `project_repository_states` WHERE NOT `project_repository_states`.`repository_verification_checksum` IS NULL AND `project_repository_states`.`last_repository_verification_failure` IS NULL;"
    },
    {
        "case source": "gitlab",
        "rewrite rule": "Predicate Elimination",
        "link": "https://gitlab.com/gitlab-org/gitlab-foss/-/commit/cdfe437e8eaad61acf0ba7f2be719ef03d724493",
        "original-sql": "SELECT COUNT(*) FROM issues INNER JOIN projects ON projects.id = issues.project_id LEFT JOIN project_features ON projects.id = project_features.project_id WHERE issues.closed_at IS NULL AND issues.state_id = 1 AND EXISTS (SELECT TRUE FROM issue_assignees WHERE user_id = 1 AND issue_id = issues.id) AND (EXISTS (SELECT 1 FROM project_authorizations WHERE project_authorizations.user_id = 1 AND project_authorizations.project_id = projects.id) OR projects.visibility_level IN (0, 10, 20)) AND projects.id IN (SELECT issues.project_id FROM issues WHERE issues.closed_at IS NULL AND issues.state_id IN (1) AND EXISTS (SELECT TRUE FROM issue_assignees WHERE user_id = 1 AND issue_id = issues.id)) AND (project_features.issues_access_level IN (10, 20) OR project_features.issues_access_level IS NULL)",
        "rewritten-sql": "SELECT COUNT(*) FROM issues INNER JOIN projects ON projects.id = issues.project_id LEFT JOIN project_features ON projects.id = project_features.project_id WHERE issues.closed_at IS NULL AND issues.state_id IN (1) AND EXISTS (SELECT TRUE FROM issue_assignees WHERE user_id = 1 AND issue_id = issues.id) AND (EXISTS (SELECT 1 FROM project_authorizations WHERE project_authorizations.user_id = 1 AND project_authorizations.project_id = projects.id) OR projects.visibility_level IN (0, 10, 20)) AND (project_features.issues_access_level IN (10, 20) OR project_features.issues_access_level IS NULL)",
        "schema": "CREATE TABLE `projects` (     `id` int(11) NOT NULL,     `visibility_level` int(11) DEFAULT NULL,     PRIMARY KEY (`id`) );  CREATE TABLE `issues` (     `id` int(11) NOT NULL,     `project_id` int(11) NOT NULL,     `closed_at` datetime DEFAULT NULL,     `state_id` int(11) DEFAULT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`project_id`) REFERENCES projects(`id`) );  CREATE TABLE `project_features` (     `id` int(11) NOT NULL,     `project_id` int(11) NOT NULL,     `issues_access_level` int(11) DEFAULT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`project_id`) REFERENCES projects(`id`) );  CREATE TABLE `issue_assignees` (     `id` int(11) NOT NULL,     `user_id` int(11) NOT NULL,     `issue_id` int(11) NOT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`issue_id`) REFERENCES issues(`id`) );  CREATE TABLE `project_authorizations` (     `id` int(11) NOT NULL,     `user_id` int(11) NOT NULL,     `project_id` int(11) NOT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`project_id`) REFERENCES projects(`id`) ); ",
        "wetune_result": "SELECT COUNT(*) FROM `issues` AS `issues` INNER JOIN `project_features` AS `project_features` ON `issues`.`project_id` = `project_features`.`project_id` INNER JOIN `projects` AS `projects` ON `issues`.`project_id` = `projects`.`id` WHERE `project_features`.`project_id` IN ( SELECT `issues0`.`project_id` AS `project_id` FROM `issues` AS `issues0` INNER JOIN `issue_assignees` AS `issue_assignees0` ON `issues0`.`id` = `issue_assignees0`.`issue_id` WHERE `issue_assignees0`.`user_id` = 1 AND `issues0`.`closed_at` IS NULL AND `issues0`.`state_id` IN (1) ) AND `issues`.`closed_at` IS NULL AND `issues`.`state_id` = 1 AND `issues`.`id` IN ( SELECT `issue_assignees`.`issue_id` AS `issue_id` FROM `issue_assignees` AS `issue_assignees` WHERE `issue_assignees`.`user_id` = 1 ) AND ( EXISTS ( SELECT 1 FROM `project_authorizations` WHERE `project_authorizations`.`user_id` = 1 AND `project_authorizations`.`project_id` = `projects`.`id` ) OR `projects`.`visibility_level` IN (0, 10, 20) ) AND ( `project_features`.`issues_access_level` IN (10, 20) OR `project_features`.`issues_access_level` IS NULL );",
        "wetune_result_many": ""
    },
    {
        "case source": "gitlab",
        "rewrite rule": "Subquery to join",
        "link": "https://gitlab.com/gitlab-org/gitlab/-/commit/86174a1b88d57c8630b3703a88723dee0d01a71c",
        "original-sql": "SELECT 1 AS \"one\" FROM container_repositories WHERE container_repositories.project_id IN (SELECT projects.id FROM projects WHERE projects.namespace_id IN (SELECT namespaces.id FROM namespaces WHERE namespaces.type = 'group' AND namespaces.id = 28) AND projects.container_registry_enabled = TRUE) LIMIT 1",
        "rewritten-sql": "SELECT 1 AS \"one\" FROM container_repositories INNER JOIN (SELECT projects.id FROM projects WHERE projects.namespace_id IN (SELECT namespaces.id FROM namespaces WHERE namespaces.type = 'Group' AND namespaces.id = 9970) AND projects.container_registry_enabled = TRUE) projects ON projects.id = container_repositories.project_id LIMIT 1",
        "schema": "CREATE TABLE `namespaces`(     `id` int(11) NOT NULL,     `type` varchar(255) DEFAULT NULL,     PRIMARY KEY (`id`) );  CREATE TABLE `projects`(     `id` int(11) NOT NULL,     `namespace_id` int(11) DEFAULT NULL,     `container_registry_enabled` boolean DEFAULT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`namespace_id`) REFERENCES `namespaces`(`id`) );  CREATE TABLE `container_repositories`(     `id` int(11) NOT NULL,     `project_id` int(11) DEFAULT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`project_id`) REFERENCES `projects`(`id`) ); ",
        "wetune_result": "error"
    },
    {
        "case source": "gitlab",
        "rewrite rule": "OR to union",
        "link": "https://gitlab.com/gitlab-org/gitlab/-/commit/aed26bfc724be55275a7e90ba06bdae091915ae1?merge_request_iid=2196",
        "original-sql": "SELECT COUNT(*) FROM users WHERE users.state IN ('active') AND (users.ghost = 0 OR users.ghost IS NULL) AND (users.bot_type = 0 OR users.bot_type IS NULL) AND (id IN (SELECT project_authorizations.user_id FROM project_authorizations WHERE project_authorizations.project_id = 13083 AND access_level > 20) OR id IN (443319)) AND NOT id IN (SELECT approvals.user_id FROM approvals WHERE approvals.merge_request_id = 2294769) AND users.id <> 840794",
        "rewritten-sql": "SELECT COUNT(*) FROM (SELECT users.id FROM users WHERE users.state IN ('active') AND (users.ghost = 0 OR users.ghost IS NULL) AND (users.bot_type = 0 OR users.bot_type IS NULL) AND users.id NOT IN (SELECT approvals.user_id FROM approvals WHERE approvals.merge_request_id = 2294769) AND users.id != 840794 AND users.id IN (SELECT project_authorizations.user_id FROM project_authorizations WHERE project_authorizations.project_id = 13083 AND (access_level > 20)) UNION SELECT users.id FROM users WHERE users.state IN ('active') AND (users.ghost = 0 OR users.ghost IS NULL) AND (users.bot_type = 0 OR users.bot_type IS NULL) AND users.id NOT IN (SELECT approvals.user_id FROM approvals WHERE approvals.merge_request_id = 2294769) AND (users.id != 840794) AND users.id = 443319) subquery",
        "schema": "CREATE TABLE `users`(     `id` int(11) NOT NULL,     `state` varchar(255) DEFAULT NULL,     `ghost` int(11) DEFAULT NULL,     `bot_type` int(11) DEFAULT NULL,     PRIMARY KEY (`id`) );  CREATE TABLE `project_authorizations`(     `user_id` int(11) NOT NULL,     `project_id` int(11) NOT NULL,     `access_level` int(11) DEFAULT NULL,     FOREIGN KEY (`user_id`) REFERENCES users(`id`) );  CREATE TABLE `approvals`(     `user_id` int(11) NOT NULL,     `merge_request_id` int(11) NOT NULL,     FOREIGN KEY (`user_id`) REFERENCES users(`id`) ); ",
        "wetune_result": "None"
    },
    {
        "case source": "gitlab",
        "rewrite rule": "OR to union",
        "link": "https://gitlab.com/gitlab-org/gitlab-foss/-/commit/c16b99a49c58161971d1a86613930be439385f02",
        "original-sql": "SELECT COUNT(*) FROM notes WHERE project_id = 13083 AND noteable_type = 'MergeRequest' AND noteable_id = 3985770 OR notes.project_id IN (13083, 13083) AND noteable_type = 'Commit' AND commit_id IN ('xxx')",
        "rewritten-sql": "SELECT COUNT(*) FROM (SELECT notes.id FROM notes WHERE notes.project_id = 13083 AND notes.noteable_id = 3985770 AND notes.noteable_type = 'MergeRequest' UNION SELECT notes.id FROM notes WHERE notes.project_id IN (13083, 13083) AND notes.noteable_type = 'Commit' AND notes.commit_id IN ('xxx')) subquery",
        "schema": "CREATE TABLE `notes`(     `id` int(11) NOT NULL AUTO_INCREMENT,     `project_id` int(11) NOT NULL,     `noteable_type` varchar(255) NOT NULL,     `noteable_id` int(11) DEFAULT NULL,     `commit_id` varchar(255) DEFAULT NULL,     PRIMARY KEY (`id`) ); ",
        "wetune_result": "None"
    },
    {
        "case source": "gitlab",
        "rewrite rule": "Replace column used in predicate",
        "link": "https://gitlab.com/gitlab-org/gitlab/-/commit/11e93a9a4c2ac1b5bd4d32a93a949fc8afbcc449?merge_request_iid=5348",
        "original-sql": "SELECT projects.id FROM projects LEFT JOIN project_repository_states ON projects.id = project_repository_states.project_id WHERE project_repository_states.id IS NULL AND projects.repository_storage = 'default' ORDER BY projects.last_repository_updated_at ASC LIMIT 1000",
        "rewritten-sql": "SELECT projects.id FROM projects LEFT JOIN project_repository_states ON projects.id = project_repository_states.project_id WHERE project_repository_states.project_id IS NULL AND projects.repository_storage = 'default' ORDER BY projects.last_repository_updated_at ASC LIMIT 1000",
        "schema": "CREATE TABLE `projects`(     `id` int(11) NOT NULL,     `repository_storage` varchar(255) DEFAULT NULL,     `last_repository_updated_at` datetime DEFAULT NULL,     PRIMARY KEY (`id`) );  CREATE TABLE `project_repository_states`(     `id` int(11) NOT NULL AUTO_INCREMENT,     `project_id` int(11) NOT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`project_id`) REFERENCES projects(`id`) ); ",
        "wetune_result": "None"
    },
    {
        "case source": "gitlab",
        "rewrite rule": "Replace column used in predicate",
        "link": "https://gitlab.com/gitlab-org/gitlab/-/commit/4626bed943fbb84f4b3948c07ae496e7559948a4",
        "original-sql": "SELECT ci_job_artifacts.* FROM ci_job_artifacts LEFT JOIN geo_job_artifact_deleted_events ON geo_job_artifact_deleted_events.job_artifact_id = ci_job_artifacts.id WHERE(ci_job_artifacts.file_store = 1 OR ci_job_artifacts.file_store IS NULL) AND geo_job_artifact_deleted_events.id IS NULL LIMIT 1000",
        "rewritten-sql": "SELECT ci_job_artifacts.* FROM ci_job_artifacts LEFT JOIN geo_job_artifact_deleted_events ON geo_job_artifact_deleted_events.job_artifact_id = ci_job_artifacts.id WHERE(ci_job_artifacts.file_store = 1 OR ci_job_artifacts.file_store IS NULL) AND geo_job_artifact_deleted_events.job_artifact_id IS NULL LIMIT 1000",
        "schema": "CREATE TABLE `ci_job_artifacts`(     `id` int(11) NOT NULL AUTO_INCREMENT,     `file_store` int(11) DEFAULT NULL,     PRIMARY KEY (`id`) );  CREATE TABLE `geo_job_artifact_deleted_events`(     `id` int(11) NOT NULL AUTO_INCREMENT,     `job_artifact_id` int(11) NOT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`job_artifact_id`) REFERENCES ci_job_artifacts(`id`) ); ",
        "wetune_result": "None"
    },
    {
        "case source": "gitlab",
        "rewrite rule": "Union to OR",
        "link": "https://gitlab.com/gitlab-org/gitlab-foss/-/commit/4ae25fdb6d335d6b4fa091f1b8d197a3fb753e94",
        "original-sql": "SELECT * FROM ((SELECT issues.*, issue_links.id AS issue_links_id FROM issue_links INNER JOIN issues ON issue_links.source_id = issues.id WHERE issue_links.target_id = 1153) UNION (SELECT issues.*, issue_links.id AS issue_links_id FROM issue_links INNER JOIN issues ON issue_links.source_id = issues.id WHERE issue_links.target_id = issues.id AND issue_links.source_id = 1009)) AS issues WHERE issues.id IN (SELECT issues.id FROM issues WHERE NOT issues.confidential IS TRUE OR issues.confidential = TRUE AND (issues.author_id = 7859 OR EXISTS (SELECT TRUE FROM issue_assignees WHERE user_id = 2047 AND issue_id = issues.id) OR issues.project_id IN (2926)) AND issues.project_id IN (SELECT projects.id FROM project_authorizations INNER JOIN projects ON project_authorizations.project_id = projects.id WHERE project_authorizations.user_id = 7683))",
        "rewritten-sql": "SELECT * FROM (SELECT issues.*, issue_links.id AS issue_links_id FROM issue_links INNER JOIN issues on issue_links.source_id = issues.id WHERE issue_links.target_id = 1153 OR (issue_links.target_id = issues.id AND issue_links.source_id = 1009)) issues WHERE id IN (SELECT issues.id FROM issues WHERE issues.confidential IS NOT TRUE OR (issues.confidential IS TRUE AND (issues.author_id = 7859 OR EXISTS (SELECT TRUE FROM issue_assignees WHERE user_id = 2047 AND issue_id = issues.id) OR issues.project_id IN (2926))) AND issues.project_id IN (SELECT projects.id FROM project_authorizations INNER JOIN projects ON project_authorizations.project_id = projects.id WHERE project_authorizations.user_id = 7683))",
        "schema": "CREATE TABLE `issues`(     `id` int(11) NOT NULL,     `confidential` boolean DEFAULT NULL,     `author_id` int(11) DEFAULT NULL,     `project_id` int(11) DEFAULT NULL,     PRIMARY KEY (`id`) );  CREATE TABLE `issue_links`(     `id` int(11) NOT NULL AUTO_INCREMENT,     `source_id` int(11) NOT NULL,     `target_id` int(11) NOT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`source_id`) REFERENCES `issues`(`id`),     FOREIGN KEY (`target_id`) REFERENCES `issues`(`id`) );  CREATE TABLE `issue_assignees`(     `id` int(11) NOT NULL AUTO_INCREMENT,     `user_id` int(11) NOT NULL,     `issue_id` int(11) NOT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`issue_id`) REFERENCES `issues`(`id`) );  CREATE TABLE `projects`(     `id` int(11) NOT NULL,     PRIMARY KEY (`id`) );  CREATE TABLE `project_authorizations`(     `id` int(11) NOT NULL AUTO_INCREMENT,     `user_id` int(11) NOT NULL,     `project_id` int(11) NOT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`project_id`) REFERENCES `projects`(`id`) ); ",
        "wetune_result": "SELECT `issues`.`id` AS `id`, `issues`.`confidential` AS `confidential`, `issues`.`author_id` AS `author_id`, `issues`.`project_id` AS `project_id`, `issues`.`issue_links_id` AS `issue_links_id` FROM `issues` AS `issues1` INNER JOIN ( (SELECT `issues`.`id` AS `id`, `issues`.`confidential` AS `confidential`, `issues`.`author_id` AS `author_id`, `issues`.`project_id` AS `project_id`, `issue_links`.`id` AS `issue_links_id` FROM `issue_links` AS `issue_links` INNER JOIN `issues` AS `issues` ON `issue_links`.`source_id` = `issues`.`id` WHERE `issue_links`.`target_id` = 1153) UNION DISTINCT (SELECT `issues0`.`id` AS `id`, `issues0`.`confidential` AS `confidential`, `issues0`.`author_id` AS `author_id`, `issues0`.`project_id` AS `project_id`, `issue_links0`.`id` AS `issue_links_id` FROM `issue_links` AS `issue_links0` INNER JOIN `issues` AS `issues0` ON `issue_links0`.`source_id` = `issues0`.`id` AND `issue_links0`.`target_id` = `issues0`.`id` WHERE `issue_links0`.`source_id` = 1009) ) AS `issues` ON `issues1`.`id` = `issues`.`id` WHERE NOT `issues1`.`confidential` = TRUE OR `issues1`.`confidential` = TRUE AND ( `issues1`.`author_id` = 7859 OR EXISTS ( SELECT TRUE FROM `issue_assignees` WHERE `user_id` = 2047 AND `issue_id` = `issues`.`id` ) OR `issues1`.`project_id` IN (2926) ) AND `issues1`.`project_id` IN ( SELECT `projects`.`id` FROM `project_authorizations` INNER JOIN `projects` ON `project_authorizations`.`project_id` = `projects`.`id` WHERE `project_authorizations`.`user_id` = 7683 )",
        "wetune_result_many": ""
    },
    {
        "case source": "gitlab",
        "rewrite rule": "Subquery elimination",
        "link": "https://gitlab.com/gitlab-org/gitlab-foss/-/commit/f09fe848da02189a3dafe2d532fefb1379eacac4?merge_request_iid=17462",
        "original-sql": "SELECT COUNT(*) FROM todos INNER JOIN projects ON projects.id = todos.project_id WHERE todos.user_id = 1 AND todos.state IN ('pending') AND projects.id IN (SELECT projects.id FROM projects WHERE EXISTS (SELECT 1 FROM project_authorizations WHERE project_authorizations.user_id = 1 AND project_authorizations.project_id = projects.id) OR projects.visibility_level IN (10, 20)) AND projects.id IN (SELECT todos.project_id FROM todos WHERE todos.user_id = 1 AND todos.state IN ('pending'))",
        "rewritten-sql": "SELECT COUNT(*) FROM todos INNER JOIN projects ON projects.id = todos.project_id WHERE todos.user_id = 1 AND todos.state IN ('pending') AND (EXISTS (SELECT 1 FROM project_authorizations WHERE project_authorizations.user_id = 1 AND (project_authorizations.project_id = projects.id)) OR projects.visibility_level IN (0, 10, 20)) AND projects.id IN (SELECT todos.project_id FROM todos WHERE todos.user_id = 1 AND (todos.state IN ('pending')))",
        "schema": "CREATE TABLE `projects`(     `id` int(11) NOT NULL,     `visibility_level` int(11) DEFAULT NULL,     PRIMARY KEY (`id`) );  CREATE TABLE `todos`(     `id` int(11) NOT NULL AUTO_INCREMENT,     `project_id` int(11) NOT NULL,     `user_id` int(11) NOT NULL,     `state` varchar(255) DEFAULT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`project_id`) REFERENCES projects(`id`) );  CREATE TABLE `project_authorizations`(     `id` int(11) NOT NULL AUTO_INCREMENT,     `user_id` int(11) NOT NULL,     `project_id` int(11) NOT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`project_id`) REFERENCES projects(`id`) ); ",
        "wetune_result": "SELECT COUNT(*) FROM `todos` AS `todos` WHERE `todos`.`user_id` = 1 AND `todos`.`state` IN ('pending') AND `todos`.`project_id` IN ( SELECT `projects0`.`id` AS `id` FROM `projects` AS `projects0` INNER JOIN `todos` AS `todos0` ON `projects0`.`id` = `todos0`.`project_id` WHERE `todos0`.`user_id` = 1 AND `todos0`.`state` IN ('pending') AND ( EXISTS ( SELECT 1 FROM `project_authorizations` WHERE `project_authorizations`.`user_id` = 1 AND `project_authorizations`.`project_id` = `projects`.`id` ) OR `projects0`.`visibility_level` IN (10, 20) ) );",
        "wetune_result_many": ""
    },
    {
        "case source": "gitlab",
        "rewrite rule": "Subquery elimination",
        "link": "https://gitlab.com/gitlab-org/gitlab/-/commit/66d48385ecaf46b7ddfe0bd33440baaf4ff81a77",
        "original-sql": "SELECT DISTINCT * FROM members WHERE members.id IN (SELECT id FROM members WHERE members.source_id = 165620945) OR members.id IN (SELECT id FROM members WHERE requested_at IS NULL AND NOT user_id IN (SELECT users.id FROM users INNER JOIN members ON users.id = members.user_id WHERE members.source_id = 1162172858))",
        "rewritten-sql": "SELECT * FROM members WHERE members.source_id = 165620945 UNION select * from members WHERE requested_at IS NULL AND user_id NOT IN (select users.id from users INNER JOIN members ON users.id = members.user_id WHERE members.source_id = 1162172858)",
        "schema": "CREATE TABLE `members`(     `id` int(11) NOT NULL,     `source_id` int(11) DEFAULT NULL,     `requested_at` datetime DEFAULT NULL,     `user_id` int(11) DEFAULT NULL,     PRIMARY KEY (`id`) );  CREATE TABLE `users`(     `id` int(11) NOT NULL,     PRIMARY KEY (`id`) ); ",
        "wetune_result": "SELECT `members`.`id` AS `id`, `members`.`source_id` AS `source_id`, `members`.`requested_at` AS `requested_at`, `members`.`user_id` AS `user_id` FROM `members` AS `members` WHERE `members`.`id` IN ( SELECT `id` FROM `members` WHERE `members`.`source_id` = 165620945 ) OR `members`.`id` IN ( SELECT `id` FROM `members` WHERE `requested_at` IS NULL AND NOT `user_id` IN ( SELECT `users`.`id` FROM `users` INNER JOIN `members` ON `users`.`id` = `members`.`user_id` WHERE `members`.`source_id` = 1162172858 ) )"
    },
    {
        "case source": "gitlab",
        "rewrite rule": "Subquery to join",
        "link": "https://gitlab.com/gitlab-org/gitlab-foss/-/commit/9127ae5ca80aa06b0a83d275e2a2d9b7ccfbfc3d",
        "original-sql": "SELECT * FROM issues WHERE NOT issues.id IN (SELECT target_id FROM label_links WHERE target_type = 'default')",
        "rewritten-sql": "SELECT issues.* FROM issues LEFT OUTER JOIN label_links ON label_links.target_type = 'default' AND label_links.target_id = issues.id WHERE label_links.target_id IS NULL",
        "schema": "CREATE TABLE `issues`(     `id` int(11) NOT NULL,     PRIMARY KEY (`id`) );  CREATE TABLE `label_links`(     `id` int(11) NOT NULL AUTO_INCREMENT,     `target_id` int(11) NOT NULL,     `target_type` varchar(255) NOT NULL,     PRIMARY KEY (`id`) ); ",
        "wetune_result": "None"
    },
    {
        "case source": "gitlab",
        "rewrite rule": "Group by elimination",
        "link": "https://gitlab.com/gitlab-org/gitlab-foss/-/commit/0f1452c2d1a59f8460b01eee7ae4a1ef51f41514?merge_request_iid=10573",
        "original-sql": "SELECT COUNT(*) FROM ci_builds WHERE ci_builds.type IN ('Ci::Build') AND ci_builds.id IN (SELECT MAX(ci_builds.id) FROM ci_builds WHERE ci_builds.type IN ('Ci::Build') GROUP BY ci_builds.name, ci_builds.commit_id) AND ci_builds.status IN ('failed', 'canceled') AND ci_builds.commit_id IN (8088)",
        "rewritten-sql": "SELECT COUNT(*) FROM ci_builds WHERE ci_builds.type IN ('Ci::Build') AND ci_builds.id = (SELECT max(other_builds.id) FROM ci_builds other_builds WHERE other_builds.type IN ('Ci::Build') AND other_builds.commit_id = ci_builds.commit_id AND other_builds.name = ci_builds.name) AND ci_builds.status IN ('failed', 'canceled') AND ci_builds.commit_id IN (8088)",
        "schema": "CREATE TABLE `ci_builds`(     `id` int(11) NOT NULL AUTO_INCREMENT,     `type` varchar(255) NOT NULL,     `name` varchar(255) NOT NULL,     `commit_id` int(11) NOT NULL,     `status` varchar(255) NOT NULL,     PRIMARY KEY (`id`) ); ",
        "wetune_result": "None"
    },
    {
        "case source": "gitlab",
        "rewrite rule": "Subquery to join",
        "link": "https://gitlab.com/gitlab-org/gitlab/-/commit/a9fcc790dd9b47d51d322845226d625e140b79c8",
        "original-sql": "SELECT * FROM lfs_objects WHERE id IN (SELECT lfs_object_id FROM lfs_objects_projects WHERE project_id = 373049032)",
        "rewritten-sql": "SELECT DISTINCT lfs_objects.* FROM lfs_objects INNER JOIN lfs_objects_projects ON lfs_objects_projects.lfs_object_id = lfs_objects.id WHERE lfs_objects_projects.project_id = 373049032",
        "schema": "CREATE TABLE `lfs_objects`(     `id` int(11) NOT NULL,     PRIMARY KEY (`id`) );  CREATE TABLE `lfs_objects_projects`(     `id` int(11) NOT NULL AUTO_INCREMENT,     `lfs_object_id` int(11) NOT NULL,     `project_id` int(11) NOT NULL,     FOREIGN KEY (`lfs_object_id`) REFERENCES lfs_objects(`id`) ); ",
        "wetune_result": "SELECT DISTINCT `lfs_objects_projects`.`lfs_object_id` AS `id` FROM `lfs_objects_projects` AS `lfs_objects_projects` WHERE `lfs_objects_projects`.`project_id` = 373049032;"
    },
    {
        "case source": "gitlab",
        "rewrite rule": "OR to union",
        "link": "https://gitlab.com/gitlab-org/gitlab/-/commit/271e7a325340551475ae937aaf2ed7a6344be9e8",
        "original-sql": "SELECT ci_builds.* FROM ci_builds WHERE ci_builds.type IN ('Ci::Build') AND (artifacts_file <> '' OR EXISTS (SELECT 1 FROM ci_job_artifacts WHERE ci_builds.id = ci_job_artifacts.job_id))",
        "rewritten-sql": "SELECT ci_builds.* FROM ci_builds WHERE ci_builds.type IN ('Ci::Build') AND ci_builds.id IN (SELECT ci_builds.id FROM ci_builds WHERE artifacts_file <> '' UNION ALL SELECT ci_builds.id FROM ci_builds WHERE EXISTS (SELECT 1 FROM ci_job_artifacts WHERE ci_builds.id = ci_job_artifacts.job_id))",
        "schema": "CREATE TABLE `ci_builds`(     `id` int(11) NOT NULL AUTO_INCREMENT,     `type` varchar(255) DEFAULT NULL,     `artifacts_file` varchar(255) DEFAULT NULL,     PRIMARY KEY (`id`) );  CREATE TABLE `ci_job_artifacts`(     `id` int(11) NOT NULL AUTO_INCREMENT,     `job_id` int(11) NOT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`job_id`) REFERENCES ci_builds(`id`) ); ",
        "wetune_result": "None"
    },
    {
        "case source": "gitlab",
        "rewrite rule": "OR to union",
        "link": "https://gitlab.com/gitlab-org/gitlab-foss/-/commit/d13aebabc36b6f5fcf41ba32a9c6ee45b91daf3f?merge_request_iid=17088",
        "original-sql": "SELECT * FROM projects WHERE EXISTS (SELECT 1 FROM project_authorizations WHERE user_id = 7683 AND project_authorizations.project_id = projects.id) OR projects.visibility_level IN (1473811210)",
        "rewritten-sql": "SELECT * FROM projects WHERE projects.id IN (select id FROM projects WHERE EXISTS (SELECT 1 FROM project_authorizations WHERE user_id = 7683 AND project_authorizations.project_id = projects.id) UNION select id FROM projects WHERE projects.visibility_level IN (1473811210))",
        "schema": "CREATE TABLE `projects`(     `id` int(11) NOT NULL AUTO_INCREMENT,     `visibility_level` int(11) DEFAULT NULL,     PRIMARY KEY (`id`) );  CREATE TABLE `project_authorizations`(     `id` int(11) NOT NULL AUTO_INCREMENT,     `user_id` int(11) NOT NULL,     `project_id` int(11) NOT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`project_id`) REFERENCES projects(`id`) ); ",
        "wetune_result": "None"
    },
    {
        "case source": "gitlab",
        "rewrite rule": "Subquery to join",
        "link": "https://gitlab.com/gitlab-org/gitlab/-/commit/cd063eec32a8b32d9b118f6cbdb0e96de0d0ec51",
        "original-sql": "SELECT * FROM tags INNER JOIN (SELECT DISTINCT * FROM taggings WHERE taggable_type = 'default') AS t ON tags.id = t.tag_id",
        "rewritten-sql": "SELECT DISTINCT * FROM tags INNER JOIN taggings ON tags.id = taggings.tag_id WHERE taggable_type = 'default'",
        "schema": "CREATE TABLE `tags`(     `id` int(11) NOT NULL,     PRIMARY KEY (`id`) );  CREATE TABLE `taggings`(     `id` int(11) NOT NULL AUTO_INCREMENT,     `tag_id` int(11) NOT NULL,     `taggable_type` varchar(255) DEFAULT NULL,     FOREIGN KEY (`tag_id`) REFERENCES `tags`(`id`) ); ",
        "wetune_result": "None"
    },
    {
        "case source": "gitlab",
        "rewrite rule": "Subquery to join",
        "link": "https://gitlab.com/gitlab-org/gitlab/-/commit/b603a513cf6ce28cbcd16f330daf9325aa8a77eb",
        "original-sql": "SELECT DISTINCT * FROM users WHERE email = 'abc@163.com' OR id IN (SELECT emails.user_id FROM emails WHERE email = 'xyz@163.com') LIMIT 1",
        "rewritten-sql": "SELECT * FROM (SELECT * FROM users WHERE email = 'abc@163.com' UNION ALL SELECT users.* FROM users INNER JOIN emails ON users.id = emails.user_id WHERE emails.email = 'xyz@163.com') subquery LIMIT 1",
        "schema": "CREATE TABLE `users`(     `id` int(11) NOT NULL AUTO_INCREMENT,     `email` varchar(255) NOT NULL,     PRIMARY KEY (`id`) );  CREATE TABLE `emails`(     `id` int(11) NOT NULL AUTO_INCREMENT,     `user_id` int(11) NOT NULL,     `email` varchar(255) NOT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`user_id`) REFERENCES users(`id`) ); ",
        "wetune_result": "SELECT `users`.`id` AS `id`, `users`.`email` AS `email` FROM `users` AS `users` WHERE `users`.`email` = 'abc@163.com' OR `users`.`id` IN ( SELECT `emails`.`user_id` FROM `emails` WHERE `email` = 'xyz@163.com' ) LIMIT 1"
    },
    {
        "case source": "gitlab",
        "rewrite rule": "OR to union",
        "link": "https://gitlab.com/gitlab-org/gitlab-foss/-/commit/df7d65a7aa213834b25f9480d6debc22c6315630?merge_request_iid=17190",
        "original-sql": "SELECT members.* FROM members LEFT JOIN users ON members.user_id = users.id WHERE members.id IN (SELECT members.id FROM members WHERE members.source_type = 'Project' AND members.type IN ('ProjectMember') AND members.source_id = 13083 AND members.source_type = 'Project' AND members.type IN ('ProjectMember') AND members.requested_at IS NULL AND members.invite_token IS NULL) OR members.id IN (SELECT members.id FROM members WHERE members.source_type = 'Namespace' AND members.type IN ('GroupMember') AND members.source_id = 9970 AND members.source_type = 'Namespace' AND members.type IN ('GroupMember') AND members.requested_at IS NULL AND NOT members.user_id IN (SELECT members.user_id FROM members WHERE members.source_type = 'Project' AND members.type IN ('ProjectMember') AND members.source_id = 13083 AND members.source_type = 'Project' AND members.type IN ('ProjectMember') AND members.requested_at IS NULL AND members.invite_token IS NULL AND NOT members.user_id IS NULL) AND members.invite_token IS NULL)",
        "rewritten-sql": "SELECT members.* FROM (SELECT DISTINCT ON (user_id) member_union.* FROM (SELECT members.* FROM members WHERE members.source_type = 'Project' AND members.type IN ('ProjectMember') AND members.source_id = 13083 AND members.source_type = 'Project' AND members.type IN ('ProjectMember') AND members.requested_at IS NULL AND members.invite_token IS NULL UNION ALL SELECT members.* FROM members WHERE members.source_type = 'Namespace' AND members.type IN ('GroupMember') AND members.source_id = 9970 AND members.source_type = 'Namespace' AND members.type IN ('GroupMember') AND members.requested_at IS NULL AND members.invite_token IS NULL) AS member_union ORDER BY user_id, CASE WHEN type = 'ProjectMember' THEN 1 WHEN type = 'GroupMember' THEN 2 ELSE 3 END) AS members LEFT JOIN users ON members.user_id = users.id ORDER BY users.name ASC NULLS LAST LIMIT 20 OFFSET 0",
        "schema": "CREATE TABLE `users` (     `id` int(11) NOT NULL,     PRIMARY KEY (`id`) );  CREATE TABLE `members` (     `id` int(11) NOT NULL AUTO_INCREMENT,     `user_id` int(11) DEFAULT NULL,     `source_type` varchar(255) DEFAULT NULL,     `type` varchar(255) DEFAULT NULL,     `source_id` int(11) DEFAULT NULL,     `requested_at` datetime DEFAULT NULL,     `invite_token` varchar(255) DEFAULT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`user_id`) REFERENCES `users`(`id`) ); ",
        "wetune_result": "SELECT `members`.`id` AS `id`, `members`.`user_id` AS `user_id`, `members`.`source_type` AS `source_type`, `members`.`type` AS `type`, `members`.`source_id` AS `source_id`, `members`.`requested_at` AS `requested_at`, `members`.`invite_token` AS `invite_token` FROM `members` AS `members` WHERE `members`.`id` IN ( SELECT `members`.`id` FROM `members` WHERE `members`.`source_type` = 'Project' AND `members`.`type` IN ('ProjectMember') AND `members`.`source_id` = 13083 AND `members`.`source_type` = 'Project' AND `members`.`type` IN ('ProjectMember') AND `members`.`requested_at` IS NULL AND `members`.`invite_token` IS NULL ) OR `members`.`id` IN ( SELECT `members`.`id` FROM `members` WHERE `members`.`source_type` = 'Namespace' AND `members`.`type` IN ('GroupMember') AND `members`.`source_id` = 9970 AND `members`.`source_type` = 'Namespace' AND `members`.`type` IN ('GroupMember') AND `members`.`requested_at` IS NULL AND NOT `members`.`user_id` IN ( SELECT `members`.`user_id` FROM `members` WHERE `members`.`source_type` = 'Project' AND `members`.`type` IN ('ProjectMember') AND `members`.`source_id` = 13083 AND `members`.`source_type` = 'Project' AND `members`.`type` IN ('ProjectMember') AND `members`.`requested_at` IS NULL AND `members`.`invite_token` IS NULL AND NOT `members`.`user_id` IS NULL ) AND `members`.`invite_token` IS NULL )"
    },
    {
        "case source": "gitlab",
        "rewrite rule": "Subquery elimination",
        "link": "https://gitlab.com/gitlab-org/gitlab-foss/-/commit/f66c00adc6d475162b14eed29290923e9ea8a25f?merge_request_iid=32679",
        "original-sql": "SELECT note_diff_files.id FROM note_diff_files INNER JOIN notes ON notes.id = note_diff_files.diff_note_id AND notes.type IN ('DiffNote') LEFT JOIN projects ON projects.id = notes.project_id WHERE note_diff_files.diff_note_id IN (SELECT id FROM ((SELECT notes.* FROM notes WHERE notes.noteable_id = 18527120 AND notes.noteable_type = 'MergeRequest') UNION ALL (SELECT notes.* FROM notes WHERE notes.project_id IN (7764, 7764) AND notes.noteable_type = 'Commit' AND notes.commit_id IN (2044708959))) AS notes)",
        "rewritten-sql": "SELECT note_diff_files.* FROM note_diff_files INNER JOIN notes ON notes.id = note_diff_files.diff_note_id AND notes.type IN ('DiffNote') WHERE notes.noteable_id = 18 AND notes.noteable_type = 'MergeRequest' OR notes.project_id IN (10, 10) AND notes.noteable_type = 'Commit' AND notes.commit_id IN (2044708959)",
        "schema": "CREATE TABLE `note_diff_files`(     `id` int(11) NOT NULL AUTO_INCREMENT,     `diff_note_id` int(11) NOT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`diff_note_id`) REFERENCES notes(id) );  CREATE TABLE `notes`(     `id` int(11) NOT NULL AUTO_INCREMENT,     `type` varchar(255) DEFAULT NULL,     `noteable_id` int(11) DEFAULT NULL,     `noteable_type` varchar(255) DEFAULT NULL,     `project_id` int(11) DEFAULT NULL,     `commit_id` int(11) DEFAULT NULL,     PRIMARY KEY (`id`) );  CREATE TABLE `projects`(     `id` int(11) NOT NULL AUTO_INCREMENT,     PRIMARY KEY (`id`) ); ",
        "wetune_result": "SELECT `note_diff_files`.`id` AS `id` FROM `note_diff_files` AS `note_diff_files` INNER JOIN ( (SELECT `notes1`.`id` AS `id`, `notes1`.`type` AS `type`, `notes1`.`noteable_id` AS `noteable_id`, `notes1`.`noteable_type` AS `noteable_type`, `notes1`.`project_id` AS `project_id`, `notes1`.`commit_id` AS `commit_id` FROM `notes` AS `notes1` WHERE `notes1`.`project_id` IN (7764, 7764) AND `notes1`.`noteable_type` = 'Commit' AND `notes1`.`commit_id` IN (2044708959)) UNION ALL (SELECT `notes0`.`id` AS `id`, `notes0`.`type` AS `type`, `notes0`.`noteable_id` AS `noteable_id`, `notes0`.`noteable_type` AS `noteable_type`, `notes0`.`project_id` AS `project_id`, `notes0`.`commit_id` AS `commit_id` FROM `notes` AS `notes0` WHERE `notes0`.`noteable_id` = 18527120 AND `notes0`.`noteable_type` = 'MergeRequest') ) AS `notes` ON `note_diff_files`.`diff_note_id` = `notes`.`id` INNER JOIN `notes` AS `notes` ON `note_diff_files`.`diff_note_id` = `notes`.`id` WHERE `notes`.`type` IN ('DiffNote')",
        "wetune_result_many": ""
    },
    {
        "case source": "gitlab",
        "rewrite rule": "Subquery elimination",
        "link": "https://gitlab.com/gitlab-org/gitlab-foss/-/commit/6c46656afc372124d25c22648ecccc9d9c0ff016?merge_request_iid=14022",
        "original-sql": "SELECT merge_requests.* FROM merge_requests INNER JOIN label_links ON label_links.target_id = merge_requests.id AND label_links.target_type = 'MergeRequest' INNER JOIN labels ON labels.id = label_links.label_id WHERE merge_requests.state_id IN (1) AND labels.title = 'bug' AND labels.id IN (SELECT labels.id FROM labels WHERE labels.id IN (SELECT labels.id FROM labels WHERE labels.project_id IN (SELECT projects.id FROM projects WHERE projects.id = 13083)) ORDER BY labels.title ASC) AND merge_requests.target_project_id = 13083 ORDER BY merge_requests.id DESC",
        "rewritten-sql": "SELECT merge_requests.* FROM merge_requests WHERE merge_requests.state_id IN (1) AND EXISTS (SELECT 1 FROM label_links INNER JOIN labels ON labels.id = label_links.label_id WHERE label_links.target_id = merge_requests.id AND label_links.target_type = 'MergeRequest' AND labels.title = 'bug') AND merge_requests.target_project_id = 13083 ORDER BY merge_requests.id DESC",
        "schema": "CREATE TABLE `merge_requests`(     `id` int(11) NOT NULL,     `state_id` int(11) NOT NULL,     `target_project_id` int(11) NOT NULL,     PRIMARY KEY (`id`) );  CREATE TABLE `label_links`(     `id` int(11) NOT NULL AUTO_INCREMENT,     `target_id` int(11) NOT NULL,     `target_type` varchar(255) NOT NULL,     `label_id` int(11) NOT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`label_id`) REFERENCES labels(`id`) );  CREATE TABLE `labels`(     `id` int(11) NOT NULL,     `title` varchar(255) NOT NULL,     `project_id` int(11) NOT NULL,     PRIMARY KEY (`id`) );  CREATE TABLE `projects`(     `id` int(11) NOT NULL,     PRIMARY KEY (`id`) ); ",
        "wetune_result": "SELECT `merge_requests`.`id` AS `id`, `merge_requests`.`state_id` AS `state_id`, `merge_requests`.`target_project_id` AS `target_project_id` FROM `merge_requests` AS `merge_requests` INNER JOIN `label_links` AS `label_links` ON `label_links`.`target_id` = `merge_requests`.`id` INNER JOIN `labels` AS `labels` ON `labels`.`id` = `label_links`.`label_id` INNER JOIN `labels` AS `labels1` ON `labels`.`id` = `labels1`.`id` INNER JOIN `projects` AS `projects` ON `labels1`.`project_id` = `projects`.`id` WHERE `projects`.`id` = 13083 AND `merge_requests`.`state_id` IN (1) AND `labels`.`title` = 'bug' AND `merge_requests`.`target_project_id` = 13083 AND `label_links`.`target_type` = 'MergeRequest' ORDER BY `merge_requests`.`id` DESC",
        "wetune_result_many": ""
    },
    {
        "case source": "gitlab",
        "rewrite rule": "Union to OR",
        "link": "https://gitlab.com/gitlab-org/gitlab-foss/-/commit/d29347220c07ab0191cf208d3775475c7b5d71ca?merge_request_iid=12135",
        "original-sql": "SELECT projects.* FROM projects WHERE projects.pending_delete = 'f' AND (projects.id IN (SELECT projects.id FROM projects INNER JOIN users_star_projects ON users_star_projects.project_id = projects.id INNER JOIN project_authorizations ON projects.id = project_authorizations.project_id WHERE projects.pending_delete = 'f' AND project_authorizations.user_id = 1 AND users_star_projects.user_id = 1 UNION SELECT projects.id FROM projects INNER JOIN users_star_projects ON users_star_projects.project_id = projects.id WHERE projects.visibility_level IN (20, 10) AND users_star_projects.user_id = 1)) ORDER BY projects.id DESC",
        "rewritten-sql": "SELECT projects.* FROM projects INNER JOIN users_star_projects ON users_star_projects.project_id = projects.id WHERE projects.pending_delete = 'f' AND (EXISTS (SELECT 1 FROM project_authorizations WHERE project_authorizations.user_id = 1 AND (project_id = projects.id)) OR projects.visibility_level IN (20, 10)) AND users_star_projects.user_id = 1 ORDER BY projects.id DESC",
        "schema": "CREATE TABLE `projects`(     `id` int(11) NOT NULL,     `pending_delete` char(1) NOT NULL,     `visibility_level` int(11) DEFAULT NULL,     PRIMARY KEY (`id`) );  CREATE TABLE `users_star_projects`(     `id` int(11) NOT NULL AUTO_INCREMENT,     `user_id` int(11) NOT NULL,     `project_id` int(11) NOT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`project_id`) REFERENCES projects(`id`) );  CREATE TABLE `project_authorizations`(     `id` int(11) NOT NULL AUTO_INCREMENT,     `user_id` int(11) NOT NULL,     `project_id` int(11) NOT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`project_id`) REFERENCES projects(`id`) ); ",
        "wetune_result": "SELECT `projects`.`id` AS `id`, `projects`.`pending_delete` AS `pending_delete`, `projects`.`visibility_level` AS `visibility_level` FROM `projects` AS `projects` WHERE `projects`.`pending_delete` = 'f' AND `projects`.`id` IN ( (SELECT `projects0`.`id` AS `id` FROM `projects` AS `projects0` INNER JOIN `users_star_projects` AS `users_star_projects` ON `projects0`.`id` = `users_star_projects`.`project_id` INNER JOIN `project_authorizations` AS `project_authorizations` ON `users_star_projects`.`project_id` = `project_authorizations`.`project_id` WHERE `projects0`.`pending_delete` = 'f' AND `project_authorizations`.`user_id` = 1 AND `users_star_projects`.`user_id` = 1) UNION DISTINCT (SELECT `projects1`.`id` AS `id` FROM `projects` AS `projects1` INNER JOIN `users_star_projects` AS `users_star_projects0` ON `users_star_projects0`.`project_id` = `projects1`.`id` WHERE `projects1`.`visibility_level` IN (20, 10) AND `users_star_projects0`.`user_id` = 1) ) ORDER BY `projects`.`id` DESC;",
        "wetune_result_many": ""
    },
    {
        "case source": "spree",
        "rewrite rule": "Group by elimination",
        "link": "https://github.com/spree/spree/commit/53edfb882b7867995ae0ab4df4ae9adad8fb3bec",
        "original-sql": "SELECT spree_products.* FROM spree_products WHERE spree_products.deleted_at IS NULL AND spree_products.id IN (SELECT product_id FROM spree_variants GROUP BY product_id HAVING SUM(count_on_hand) > 0) LIMIT 100",
        "rewritten-sql": "SELECT spree_products.* FROM spree_products WHERE spree_products.deleted_at IS NULL AND (spree_products.id in (select product_id from spree_variants where product_id = spree_products.id and spree_variants.deleted_at IS NULL group by product_id having sum(count_on_hand) > 0)) LIMIT 100",
        "schema": "CREATE TABLE `spree_products`(     `id` int(11) NOT NULL AUTO_INCREMENT,     `deleted_at` datetime DEFAULT NULL,     PRIMARY KEY (`id`) );  CREATE TABLE `spree_variants`(     `id` int(11) NOT NULL AUTO_INCREMENT,     `product_id` int(11) NOT NULL,     `count_on_hand` int(11) NOT NULL DEFAULT 0,     PRIMARY KEY (`id`),     FOREIGN KEY (`product_id`) REFERENCES spree_products(`id`) ); ",
        "wetune_result": "None"
    },
    {
        "case source": "spree",
        "rewrite rule": "Join Elimination",
        "link": "https://github.com/spree/spree/commit/6a5f22c054fa3f0e6ef9a6bbc47502191336a170",
        "original-sql": "SELECT spree_promotions.* FROM spree_promotions INNER JOIN spree_order_promotions ON spree_order_promotions.promotion_id = spree_promotions.id INNER JOIN spree_orders ON spree_orders.id = spree_order_promotions.order_id",
        "rewritten-sql": "SELECT spree_promotions.* FROM spree_promotions INNER JOIN spree_order_promotions ON spree_order_promotions.promotion_id = spree_promotions.id",
        "schema": "CREATE TABLE `spree_promotions` (     `id` int(11) NOT NULL,     PRIMARY KEY (`id`) );  CREATE TABLE `spree_order_promotions` (     `id` int(11) NOT NULL AUTO_INCREMENT,     `promotion_id` int(11) NOT NULL,     `order_id` int(11) NOT NULL,     FOREIGN KEY (`promotion_id`) REFERENCES spree_promotions(`id`),     PRIMARY KEY (`id`) );  CREATE TABLE `spree_orders` (     `id` int(11) NOT NULL,     PRIMARY KEY (`id`) ); ",
        "wetune_result": "SELECT `spree_order_promotions`.`promotion_id` AS `id` FROM `spree_order_promotions` AS `spree_order_promotions` INNER JOIN `spree_orders` AS `spree_orders` ON `spree_orders`.`id` = `spree_order_promotions`.`order_id`;"
    },
    {
        "case source": "spree",
        "rewrite rule": "Join Elimination",
        "link": "https://github.com/spree/spree/commit/4f7e121cc2c6f519ae429e592648b15c93aa6837",
        "original-sql": "SELECT DISTINCT spree_products.* FROM spree_products INNER JOIN spree_products_taxons ON spree_products_taxons.product_id = spree_products.id INNER JOIN spree_taxons ON spree_taxons.id = spree_products_taxons.taxon_id INNER JOIN spree_variants ON spree_variants.deleted_at IS NULL AND spree_variants.is_master = 0 AND spree_variants.product_id = spree_products.id INNER JOIN spree_prices ON spree_prices.deleted_at IS NULL AND spree_prices.variant_id = spree_variants.id WHERE spree_products.deleted_at IS NULL AND spree_taxons.id IN (1, 2) AND (spree_products.deleted_at IS NULL OR spree_products.deleted_at >= '2020-05-24 13:55:57.476059') AND (spree_products.discontinue_on IS NULL OR spree_products.discontinue_on >= '2020-05-24 13:55:57.476251') AND spree_products.available_on <= '2020-05-24 13:55:57.476241'",
        "rewritten-sql": "SELECT DISTINCT spree_products.* FROM spree_products INNER JOIN spree_products_taxons ON spree_products_taxons.product_id = spree_products.id INNER JOIN spree_variants ON spree_variants.deleted_at IS NULL AND spree_variants.is_master = 0 AND spree_variants.product_id = spree_products.id INNER JOIN spree_prices ON spree_prices.deleted_at IS NULL AND spree_prices.variant_id = spree_variants.id WHERE spree_products.deleted_at IS NULL AND spree_products_taxons.taxon_id IN (1, 2) AND (spree_products.deleted_at IS NULL or spree_products.deleted_at >= '2020-05-24 13:49:27.370098') AND (spree_products.discontinue_on IS NULL or spree_products.discontinue_on >= '2020-05-24 13:49:27.370323') AND (spree_products.available_on <= '2020-05-24 13:49:27.370311')",
        "schema": "CREATE TABLE `spree_products` (     `id` int(11) NOT NULL,     `deleted_at` datetime DEFAULT NULL,     `discontinue_on` datetime DEFAULT NULL,     `available_on` datetime DEFAULT NULL,     PRIMARY KEY (`id`) );  CREATE TABLE `spree_products_taxons` (     `id` int(11) NOT NULL AUTO_INCREMENT,     `product_id` int(11) NOT NULL,     `taxon_id` int(11) NOT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`product_id`) REFERENCES spree_products(`id`),     FOREIGN KEY (`taxon_id`) REFERENCES spree_taxons(`id`) );  CREATE TABLE `spree_taxons` (     `id` int(11) NOT NULL,     PRIMARY KEY (`id`) );  CREATE TABLE `spree_variants` (     `id` int(11) NOT NULL,     `deleted_at` datetime DEFAULT NULL,     `is_master` tinyint(1) NOT NULL,     `product_id` int(11) NOT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`product_id`) REFERENCES spree_products(`id`) );  CREATE TABLE `spree_prices` (     `id` int(11) NOT NULL,     `deleted_at` datetime DEFAULT NULL,     `variant_id` int(11) NOT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`variant_id`) REFERENCES spree_variants(`id`) ); ",
        "wetune_result": "SELECT DISTINCT `spree_products`.`id` AS `id`, `spree_products`.`deleted_at` AS `deleted_at`, `spree_products`.`discontinue_on` AS `discontinue_on`, `spree_products`.`available_on` AS `available_on` FROM `spree_variants` AS `spree_variants` INNER JOIN `spree_prices` AS `spree_prices` ON `spree_prices`.`variant_id` = `spree_variants`.`id` INNER JOIN `spree_products` AS `spree_products` ON `spree_variants`.`product_id` = `spree_products`.`id` INNER JOIN `spree_products_taxons` AS `spree_products_taxons` ON `spree_products`.`id` = `spree_products_taxons`.`product_id` WHERE `spree_products_taxons`.`taxon_id` IN (1, 2) AND `spree_products`.`deleted_at` IS NULL AND ( `spree_products`.`deleted_at` IS NULL OR `spree_products`.`deleted_at` >= '2020-05-24 13:55:57.476059' ) AND ( `spree_products`.`discontinue_on` IS NULL OR `spree_products`.`discontinue_on` >= '2020-05-24 13:55:57.476251' ) AND `spree_products`.`available_on` <= '2020-05-24 13:55:57.476241' AND `spree_variants`.`deleted_at` IS NULL AND `spree_variants`.`is_master` = 0 AND `spree_prices`.`deleted_at` IS NULL;"
    },
    {
        "case source": "spree",
        "rewrite rule": "OR to union (left join to inner join)",
        "link": "https://github.com/spree/spree/commit/715d4439f4f02a1d75b8adac74b77dd445b61908",
        "original-sql": "SELECT DISTINCT spree_promotions.* FROM spree_promotions LEFT JOIN spree_order_promotions ON spree_promotions.id = spree_order_promotions.promotion_id WHERE(spree_promotions.starts_at IS NULL OR spree_promotions.starts_at < '2020-05-06 04:33:11.947631') AND (spree_promotions.expires_at IS NULL OR spree_promotions.expires_at > '2020-05-06 04:33:11.947825') AND (spree_promotions.code IS NULL AND spree_promotions.path IS NULL OR spree_order_promotions.order_id = 1)",
        "rewritten-sql": "SELECT spree_promotions.* FROM spree_promotions INNER JOIN spree_order_promotions ON spree_promotions.id = spree_order_promotions.promotion_id WHERE spree_order_promotions.order_id = 7 AND(spree_promotions.starts_at IS NULL OR spree_promotions.starts_at < '2020-05-01 07:30:12.771811') AND (spree_promotions.expires_at IS NULL OR spree_promotions.expires_at > '2020-05-01 07:30:12.771968') UNION SELECT spree_promotions.* FROM spree_promotions WHERE (spree_promotions.starts_at IS NULL OR spree_promotions.starts_at < '2020-05-01 07:30:12.772215') AND (spree_promotions.expires_at IS NULL OR spree_promotions.expires_at > '2020-05-01 07:30:12.772478') AND spree_promotions.code IS NULL AND spree_promotions.path IS NULL",
        "schema": "CREATE TABLE `spree_promotions` (     `id` int(11) NOT NULL AUTO_INCREMENT,     `starts_at` datetime DEFAULT NULL,     `expires_at` datetime DEFAULT NULL,     `code` varchar(255) DEFAULT NULL,     `path` varchar(255) DEFAULT NULL,     PRIMARY KEY (`id`) );  CREATE TABLE `spree_order_promotions` (     `id` int(11) NOT NULL AUTO_INCREMENT,     `promotion_id` int(11) NOT NULL,     `order_id` int(11) NOT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`promotion_id`) REFERENCES spree_promotions(`id`) ); ",
        "wetune_result": "SELECT DISTINCT `spree_promotions`.`id` AS `id`, `spree_promotions`.`starts_at` AS `starts_at`, `spree_promotions`.`expires_at` AS `expires_at`, `spree_promotions`.`code` AS `code`, `spree_promotions`.`path` AS `path` FROM `spree_promotions` AS `spree_promotions` INNER JOIN `spree_order_promotions` AS `spree_order_promotions` ON `spree_promotions`.`id` = `spree_order_promotions`.`promotion_id` WHERE (`spree_promotions`.`starts_at` IS NULL OR `spree_promotions`.`starts_at` < '2020-05-06 04:33:11.947631') AND ( `spree_promotions`.`expires_at` IS NULL OR `spree_promotions`.`expires_at` > '2020-05-06 04:33:11.947825' ) AND ( `spree_promotions`.`code` IS NULL AND `spree_promotions`.`path` IS NULL OR `spree_order_promotions`.`order_id` = 1 );"
    },
    {
        "case source": "diaspora",
        "rewrite rule": "Join Elimination",
        "link": "https://github.com/diaspora/diaspora/commit/24fffc022096da41ac0dccc1ceae0ed59839ad76",
        "original-sql": "SELECT posts.* FROM people INNER JOIN posts ON posts.author_id = people.id INNER JOIN aspect_visibilities ON aspect_visibilities.shareable_id = posts.id INNER JOIN aspects ON aspects.id = aspect_visibilities.aspect_id WHERE people.id = 1 AND aspects.id IN (1)",
        "rewritten-sql": "SELECT posts.* FROM people INNER JOIN posts ON posts.author_id = people.id INNER JOIN aspect_visibilities ON aspect_visibilities.shareable_id = posts.id WHERE people.id = 1 AND aspect_visibilities.aspect_id IN (1)",
        "schema": "CREATE TABLE `people` (     `id` int(11) NOT NULL,     PRIMARY KEY (`id`) );  CREATE TABLE `posts` (     `id` int(11) NOT NULL AUTO_INCREMENT,     `author_id` int(11) NOT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`author_id`) REFERENCES `people`(`id`) );  CREATE TABLE `aspect_visibilities` (     `id` int(11) NOT NULL AUTO_INCREMENT,     `shareable_id` int(11) NOT NULL,     `aspect_id` int(11) NOT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`shareable_id`) REFERENCES `posts`(`id`),     FOREIGN KEY (`aspect_id`) REFERENCES `aspects`(`id`) );  CREATE TABLE `aspects` (     `id` int(11) NOT NULL,     PRIMARY KEY (`id`) ); ",
        "wetune_result": "SELECT `posts`.`id` AS `id`, `posts`.`author_id` AS `author_id` FROM `posts` AS `posts` INNER JOIN `aspect_visibilities` AS `aspect_visibilities` ON `aspect_visibilities`.`shareable_id` = `posts`.`id` WHERE `aspect_visibilities`.`aspect_id` IN (1) AND `posts`.`author_id` = 1;"
    },
    {
        "case source": "redmine",
        "rewrite rule": "Predicate pushdown",
        "link": "https://github.com/redmine/redmine/commit/402d73914634e0e0a2ec06cc94e7b3ec13275546",
        "original-sql": "SELECT * FROM projects WHERE projects.status <> 'ARCHIVED' AND projects.id IN (SELECT em.project_id FROM enabled_modules em WHERE em.name = 'default')",
        "rewritten-sql": "SELECT * FROM projects WHERE projects.status <> 'ARCHIVED' AND EXISTS (SELECT 1 AS one FROM enabled_modules em WHERE em.project_id = projects.id AND em.name = 'default')",
        "schema": "CREATE TABLE `projects`(     `id` int(11) NOT NULL,     `status` varchar(255) DEFAULT NULL,     PRIMARY KEY (`id`) );  CREATE TABLE `enabled_modules`(     `id` int(11) NOT NULL AUTO_INCREMENT,     `project_id` int(11) NOT NULL,     `name` varchar(255) DEFAULT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`project_id`) REFERENCES projects(`id`) ); ",
        "wetune_result": "SELECT DISTINCT `projects`.`id` AS `id`, `projects`.`status` AS `status` FROM `enabled_modules` AS `em` INNER JOIN `projects` AS `projects` ON `em`.`project_id` = `projects`.`id` WHERE `projects`.`status` <> 'ARCHIVED' AND `em`.`name` = 'default'",
        "wetune_result_many": ""
    },
    {
        "case source": "redmine",
        "rewrite rule": "Subquery to join",
        "link": "https://github.com/redmine/redmine/commit/10b3e3e32394216fd8700635e71fd25ea52dfda1",
        "original-sql": "SELECT * FROM issues WHERE root_id IN (SELECT root_id FROM issues WHERE id IN (1)) ORDER BY id",
        "rewritten-sql": "SELECT DISTINCT * FROM issues i1 INNER JOIN (SELECT root_id FROM issues WHERE id IN (1)) i2 ON i1.root_id = i2.root_id ORDER BY id",
        "schema": "CREATE TABLE `issues`(     `id` int(11) NOT NULL,     `root_id` int(11) DEFAULT NULL,     PRIMARY KEY (`id`) ); ",
        "wetune_result": "SELECT DISTINCT `issues`.`id` AS `id`, `issues`.`root_id` AS `root_id` FROM `issues` AS `issues0` INNER JOIN `issues` AS `issues` ON `issues0`.`root_id` = `issues`.`root_id` WHERE `issues0`.`id` IN (1) ORDER BY `issues`.`id`",
        "wetune_result_many": ""
    },
    {
        "case source": "solidus",
        "rewrite rule": "Join Elimination",
        "link": "https://github.com/solidusio/solidus/commit/6a5f22c054fa3f0e6ef9a6bbc47502191336a170",
        "original-sql": "SELECT DISTINCT p.* FROM spree_promotions p INNER JOIN spree_orders_promotions op ON p.id = op.promotion_id INNER JOIN spree_orders o ON op.order_id = o.id",
        "rewritten-sql": "SELECT DISTINCT p.* FROM spree_promotions p INNER JOIN spree_orders_promotions op ON p.id = op.promotion_id",
        "schema": "CREATE TABLE `spree_promotions`(     `id` int(11) NOT NULL,     PRIMARY KEY (`id`) );  CREATE TABLE `spree_orders`(     `id` int(11) NOT NULL,     PRIMARY KEY (`id`) );  CREATE TABLE `spree_orders_promotions`(     `id` int(11) NOT NULL AUTO_INCREMENT,     `promotion_id` int(11) NOT NULL,     `order_id` int(11) NOT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`promotion_id`) REFERENCES spree_promotions(`id`),     FOREIGN KEY (`order_id`) REFERENCES spree_orders(`id`) ); ",
        "wetune_result": "SELECT DISTINCT `op`.`promotion_id` AS `id` FROM `spree_orders_promotions` AS `op`;"
    },
    {
        "case source": "lobsters",
        "rewrite rule": "Predicate pushdown",
        "link": "https://github.com/lobsters/lobsters/commit/22bb4cb069bf012ef5eb9719de621a91eca4219a",
        "original-sql": "SELECT comments.* FROM comments WHERE comments.is_deleted = 0 AND comments.is_moderated = 0 AND (story_id NOT IN (SELECT story_id FROM hidden_stories WHERE user_id = 1)) ORDER BY id DESC LIMIT 20 OFFSET 0",
        "rewritten-sql": "SELECT comments.* FROM comments WHERE comments.is_deleted = 0 AND comments.is_moderated = 0 AND (NOT EXISTS (SELECT 1 FROM hidden_stories WHERE user_id = 1 AND hidden_stories.story_id = comments.story_id)) ORDER BY id DESC LIMIT 20 OFFSET 0",
        "schema": "CREATE TABLE `comments`(     `id` int(11) NOT NULL AUTO_INCREMENT,     `story_id` int(11) NOT NULL,     `is_deleted` tinyint(1) NOT NULL DEFAULT 0,     `is_moderated` tinyint(1) NOT NULL DEFAULT 0,     PRIMARY KEY (`id`) );  CREATE TABLE `hidden_stories`(     `id` int(11) NOT NULL AUTO_INCREMENT,     `story_id` int(11) NOT NULL,     `user_id` int(11) NOT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`story_id`) REFERENCES comments(`story_id`) ); ",
        "wetune_result": "None"
    },
    {
        "case source": "lobsters",
        "rewrite rule": "Join Elimination",
        "link": "https://github.com/opf/openproject/commit/91ff59a41d4a1893381cbd70e6dfd1c2fd39a337",
        "original-sql": "SELECT users.* FROM users WHERE users.id IN (SELECT u.id FROM users AS u, comments AS c, moderations AS m WHERE c.id = m.comment_id AND c.story_id = 8895 AND c.user_id = u.id)",
        "rewritten-sql": "SELECT users.* FROM users WHERE users.id IN (SELECT c.user_id FROM comments AS c WHERE c.story_id = 8895)",
        "schema": "CREATE TABLE `users`(     `id` int(11) NOT NULL,     PRIMARY KEY (`id`) );  CREATE TABLE `comments`(     `id` int(11) NOT NULL,     `story_id` int(11) NOT NULL,     `user_id` int(11) NOT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`user_id`) REFERENCES users(`id`) );  CREATE TABLE `moderations`(     `id` int(11) NOT NULL AUTO_INCREMENT,     `comment_id` int(11) NOT NULL,     PRIMARY KEY (`id`),     FOREIGN KEY (`comment_id`) REFERENCES comments(`id`) ); ",
        "wetune_result": "SELECT DISTINCT `c`.`user_id` AS `id` FROM `comments` AS `c` INNER JOIN `moderations` AS `m` ON `c`.`id` = `m`.`comment_id` WHERE `c`.`story_id` = 8895;"
    }
]